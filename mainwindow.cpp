#include "mainwindow.h"
#include "models/mediaitem.h"
#include "models/upcomingitem.h"
#include "qjsonarray.h"
#include "storage/datamanager.h"
#include "ui_mainwindow.h"

#include <QStandardItemModel>
#include <QInputDialog>
#include <QModelIndex>
#include <QMessageBox>
#include <QStandardPaths>
#include <QDir>
#include <QDate>
#include <algorithm>
#include <QDialog>
#include <QVBoxLayout>
#include <QCalendarWidget>
#include <QCheckBox>
#include <QDialogButtonBox>
#include <QMenu>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    setWindowTitle("–ß—Ç–æ —è —Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å");
    QDir dir(QStandardPaths::writableLocation(QStandardPaths::AppDataLocation));
    if (!dir.exists())
        dir.mkpath(".");

    QDir dataDir(QStandardPaths::writableLocation(QStandardPaths::AppDataLocation) + "/data");
    if (!dataDir.exists())
        dataDir.mkpath(".");
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
    releasedModels["–°–µ—Ä–∏–∞–ª—ã"] = new QStandardItemModel(this);
    upcomingModel = new QStandardItemModel(this);
    trashModel = new QStandardItemModel(this);
    watchedModel = new QStandardItemModel(this);

    // –ü—Ä–∏–≤—è–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
    ui->listUpcoming->setModel(upcomingModel);
    ui->listTrash->setModel(trashModel);
    ui->listWatched->setModel(watchedModel);

    // –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    QStringList defaultCategories = {"–ê–Ω–∏–º–µ", "–°–µ—Ä–∏–∞–ª—ã", "–§–∏–ª—å–º—ã"};
    for (const QString& cat : defaultCategories) {
        releasedModels[cat] = new QStandardItemModel(this);
        ui->comboCategoryReleased->addItem(cat);
    }


    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–í—Å–µ" –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º –µ—ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    ui->comboCategoryReleased->insertItem(0, "–í—Å–µ");
    currentReleasedCategory = "–í—Å–µ";
    ui->comboCategoryReleased->setCurrentText(currentReleasedCategory);

    // –ü–æ—Å–∫–æ–ª—å–∫—É "–í—Å–µ" ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—É—é –º–æ–¥–µ–ª—å
    ui->listReleased->setModel(new QStandardItemModel(this));

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    connect(ui->comboCategoryReleased, &QComboBox::currentTextChanged, this, [=](const QString &text) {
        currentReleasedCategory = text;
        if (text == "–í—Å–µ") {
            updateAllReleasedModel();
        } else {
            ui->listReleased->setModel(releasedModels[text]);
        }
    });

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    connect(ui->btnAddCategory, &QPushButton::clicked, this, [=]() {
        bool ok;
        QString name = QInputDialog::getText(this, "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, "", &ok);
        if (ok && !name.isEmpty() && !releasedModels.contains(name) && name != "–í—Å–µ") {
            releasedModels[name] = new QStandardItemModel(this);
            ui->comboCategoryReleased->addItem(name);
            saveData();

            if (currentReleasedCategory == "–í—Å–µ") {
                updateAllReleasedModel();
            }
        }
    });

    ui->listUpcoming->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    ui->listReleased->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    ui->listTrash->setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);

    ui->listUpcoming->setEditTriggers(QAbstractItemView::NoEditTriggers);
    ui->listTrash->setEditTriggers(QAbstractItemView::NoEditTriggers);
    ui->listReleased->setEditTriggers(QAbstractItemView::NoEditTriggers);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–≤—ã—à–µ–¥—à–µ–µ"
    connect(ui->btnAddReleased, &QPushButton::clicked, this, &MainWindow::onAddReleased);
    connect(ui->btnEditReleased, &QPushButton::clicked, this, &MainWindow::onEditReleased);
    connect(ui->btnRemoveReleased, &QPushButton::clicked, this, &MainWindow::onRemoveReleased);
    connect(ui->listReleased, &QListView::doubleClicked, this, &MainWindow::onReleasedItemDoubleClicked);
    connect(ui->btnRemoveCategory, &QPushButton::clicked, this, &MainWindow::onRemoveCategoryClicked);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–Ω–µ –≤—ã—à–µ–¥—à–µ–µ"
    connect(ui->btnAddUpcoming, &QPushButton::clicked, this, &MainWindow::onAddUpcoming);
    connect(ui->btnEditUpcoming, &QPushButton::clicked, this, &MainWindow::onEditUpcoming);
    connect(ui->btnRemoveUpcoming, &QPushButton::clicked, this, &MainWindow::onRemoveUpcoming);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "—à–ª–∞–∫"
    connect(ui->btnAddTrash, &QPushButton::clicked, this, &MainWindow::onAddTrash);
    connect(ui->btnEditTrash, &QPushButton::clicked, this, &MainWindow::onEditTrash);
    connect(ui->btnRemoveTrash, &QPushButton::clicked, this, &MainWindow::onRemoveTrash);

     // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ"
    connect(ui->btnAddWatched, &QPushButton::clicked, this, &MainWindow::onAddWatched);
    connect(ui->btnEditWatched, &QPushButton::clicked, this, &MainWindow::onEditWatched);
    connect(ui->btnRemoveWatched, &QPushButton::clicked, this, &MainWindow::onRemoveWatched);

    setupContextMenus();

    setupThemeToggleButtons();
    loadData();                 // –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    checkUpcomingToReleased();  // –ø–µ—Ä–µ–Ω–æ—Å –ø–æ –¥–∞—Ç–µ

}

MainWindow::~MainWindow()
{
    saveData();  // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    delete ui;
}

void MainWindow::onAddReleased()
{
    QString category = currentReleasedCategory;

    if (category == "–í—Å–µ") {
        QStringList categories = releasedModels.keys();
        categories.removeAll("–í—Å–µ");

        bool ok;
        category = QInputDialog::getItem(this, "–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", categories, 0, false, &ok);
        if (!ok || category.isEmpty()) return;
    }

    bool ok;
    QString text = QInputDialog::getText(this, "–î–æ–±–∞–≤–∏—Ç—å", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, "", &ok);
    if (ok && !text.isEmpty()) {
        releasedModels[category]->appendRow(new QStandardItem(text));
        saveData();
        if (currentReleasedCategory == "–í—Å–µ")
            updateAllReleasedModel();
    }
}

void MainWindow::onEditReleased()
{
    QModelIndex index = ui->listReleased->currentIndex();
    if (!index.isValid()) return;

    QString category = currentReleasedCategory;
    int row = index.row();

    if (category == "–í—Å–µ") {
        if (!proxyCategoryMap.contains(row)) return;
        category = proxyCategoryMap[row].first;
        row = proxyCategoryMap[row].second;
    }

    QStandardItemModel* model = releasedModels[category];
    if (!model || row >= model->rowCount()) return;

    QStandardItem* item = model->item(row);
    QString currentText = item->text();

    bool ok;
    QString newText = QInputDialog::getText(this, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, currentText.trimmed(), &ok);
    if (ok && !newText.isEmpty()) {
        item->setText(newText);
        saveData();
        if (currentReleasedCategory == "–í—Å–µ")
            updateAllReleasedModel();
    }
}


void MainWindow::onRemoveReleased()
{
    QModelIndex index = ui->listReleased->currentIndex();
    if (!index.isValid()) return;

    QString category = currentReleasedCategory;
    int row = index.row();

    if (category == "–í—Å–µ") {
        if (!proxyCategoryMap.contains(row)) return;
        category = proxyCategoryMap[row].first;
        row = proxyCategoryMap[row].second;
    }

    QStandardItemModel* model = releasedModels[category];
    if (!model || row >= model->rowCount()) return;

    model->removeRow(row);
    saveData();

    if (currentReleasedCategory == "–í—Å–µ")
        updateAllReleasedModel();
}


// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–í—Å–µ"
void MainWindow::updateAllReleasedModel()
{
    QStandardItemModel *model = new QStandardItemModel(this);
    proxyCategoryMap.clear();  // –æ—á–∏—Å—Ç–∏–º –∫–∞—Ä—Ç—É

    QStringList categories = releasedModels.keys();
    categories.removeAll("–í—Å–µ");
    std::sort(categories.begin(), categories.end());

    int row = 0;
    for (const QString &cat : categories) {
        QStandardItem *categoryItem = new QStandardItem(cat + ":");
        categoryItem->setFlags(Qt::NoItemFlags);
        model->appendRow(categoryItem);
        ++row;

        QStandardItemModel *catModel = releasedModels[cat];
        for (int i = 0; i < catModel->rowCount(); ++i) {
            QString indentedText = "    " + catModel->item(i)->text();
            QStandardItem *item = new QStandardItem(indentedText);
            model->appendRow(item);
            proxyCategoryMap[row] = {cat, i};  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–æ–∫
            ++row;
        }
    }

    ui->listReleased->setModel(model);
}



// –î–≤–æ–π–Ω–æ–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É "–í—ã—à–µ–¥—à–µ–µ"
void MainWindow::onReleasedItemDoubleClicked(const QModelIndex &index)
{
    if (!index.isValid()) return;

    if (currentReleasedCategory == "–í—Å–µ") {
        // –ù–∞–π—Ç–∏ –∫ –∫–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç
        QStringList categories = releasedModels.keys();
        categories.removeAll("–í—Å–µ");

        int row = index.row();
        int count = 0;

        for (const QString& cat : categories) {
            QStandardItemModel* model = releasedModels[cat];
            count++; // —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            for (int i = 0; i < model->rowCount(); ++i) {
                if (count == row) {
                    QStandardItem* item = model->item(i);
                    if (!item) return;

                    QString text = item->text();
                    if (text.startsWith("üîî ")) {
                        item->setText(text.mid(2));
                        saveData();
                        updateAllReleasedModel(); // –æ–±–Ω–æ–≤–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    }
                    return;
                }
                count++;
            }
        }

        return; // –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
    }

    // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    QStandardItem *item = releasedModels[currentReleasedCategory]->itemFromIndex(index);
    if (!item) return;

    QString text = item->text();
    if (text.startsWith("üîî ")) {
        text = text.mid(2);
        item->setText(text);
        saveData();  // –Ω–µ –∑–∞–±—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    }
}


// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ "–í—ã—à–µ–¥—à–µ–µ"
void MainWindow::onRemoveCategoryClicked()
{
    QString current = ui->comboCategoryReleased->currentText();

    if (current == "–í—Å–µ") {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è '–í—Å–µ' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.");
        return;
    }

    if (releasedModels.contains(current)) {
        QMessageBox::StandardButton reply;
        reply = QMessageBox::question(this, "–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
                                      "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '" + current + "'?",
                                      QMessageBox::Yes | QMessageBox::No);
        if (reply == QMessageBox::Yes) {
            delete releasedModels[current];
            releasedModels.remove(current);
            releasedItems.remove(current);

            int index = ui->comboCategoryReleased->currentIndex();
            ui->comboCategoryReleased->removeItem(index);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            if (ui->comboCategoryReleased->count() > 0) {
                QString newCat = ui->comboCategoryReleased->itemText(0);
                currentReleasedCategory = newCat;
                if (newCat == "–í—Å–µ") {
                    updateAllReleasedModel();
                } else {
                    ui->listReleased->setModel(releasedModels[newCat]);
                }
                ui->comboCategoryReleased->setCurrentText(newCat);
            } else {
                currentReleasedCategory.clear();
                ui->listReleased->setModel(nullptr);
            }

            saveData();
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
void MainWindow::loadData()
{
    QString appDataPath = QStandardPaths::writableLocation(QStandardPaths::AppDataLocation);
    QDir().mkpath(appDataPath + "/data");

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã—à–µ–¥—à–µ–≥–æ ---
    QString releasedFilePath = appDataPath + "/data/released.json";
    releasedItems.clear();
    for (auto model : releasedModels)
        model->clear();

    QFile fileReleased(releasedFilePath);
    if (fileReleased.open(QIODevice::ReadOnly)) {
        QByteArray data = fileReleased.readAll();
        fileReleased.close();

        QJsonDocument doc = QJsonDocument::fromJson(data);
        if (doc.isObject()) {
            QJsonObject rootObj = doc.object();

            // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ (–∫—Ä–æ–º–µ "–í—Å–µ")
            QStringList existingCats = releasedModels.keys();
            for (const QString& cat : existingCats) {
                if (cat != "–í—Å–µ" && !rootObj.contains(cat)) {
                    delete releasedModels[cat];
                    releasedModels.remove(cat);
                    int idx = ui->comboCategoryReleased->findText(cat);
                    if (idx != -1)
                        ui->comboCategoryReleased->removeItem(idx);
                }
            }

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã
            for (const QString& cat : rootObj.keys()) {
                if (cat == "–í—Å–µ") continue;

                if (!releasedModels.contains(cat)) {
                    releasedModels[cat] = new QStandardItemModel(this);
                    if (ui->comboCategoryReleased->findText(cat) == -1) {
                        ui->comboCategoryReleased->addItem(cat);
                    }
                }
                releasedModels[cat]->clear();

                if (rootObj[cat].isArray()) {
                    QJsonArray arr = rootObj[cat].toArray();
                    QVector<MediaItem> items;
                    for (const QJsonValue& val : arr) {
                        MediaItem item;
                        item.title = val.toString();
                        items.append(item);

                        QStandardItem* stdItem = new QStandardItem(item.title);
                        releasedModels[cat]->appendRow(stdItem);
                    }
                    releasedItems[cat] = items;
                } else {
                    releasedItems[cat].clear();
                }
            }
        }
    }

    updateAllReleasedModel();

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –≤—ã—à–µ–¥—à–µ–≥–æ ---
    QString upcomingFilePath = appDataPath + "/data/upcoming.json";
    upcomingItems = DataManager::loadUpcomingItems(upcomingFilePath);
    updateUpcomingModel();

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ —à–ª–∞–∫–∞ ---
    QString trashFilePath = appDataPath + "/data/trash.json";
    trashItems = DataManager::loadItems(trashFilePath);
    trashModel->clear();
    for (const MediaItem& item : trashItems) {
        QStandardItem* trash = new QStandardItem(item.title);
        trash->setFlags(trash->flags() & ~Qt::ItemIsEditable);
        trashModel->appendRow(trash);
    }

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ ---
    QString watchedFilePath = appDataPath + "/data/watched.json";
    watchedItems = DataManager::loadWatchedItems();
    watchedModel->clear();
    for (const QString& title : watchedItems) {
        QStandardItem* watched = new QStandardItem(title);
        watched->setFlags(watched->flags() & ~Qt::ItemIsEditable);
        watchedModel->appendRow(watched);
    }
}

void MainWindow::saveData()
{
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
    watchedItems.clear();
    for (int i = 0; i < watchedModel->rowCount(); ++i) {
        MediaItem item;
        item.title = watchedModel->item(i)->text();
        watchedItems.append(watchedModel->item(i)->text());

    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—à–µ–¥—à–µ–µ
    for (const QString& cat : releasedModels.keys()) {
        if (cat == "–í—Å–µ") continue;
        releasedItems[cat].clear();
        QStandardItemModel* model = releasedModels[cat];
        for (int i = 0; i < model->rowCount(); ++i) {
            MediaItem item;
            item.title = model->item(i)->text();
            releasedItems[cat].append(item);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º released.json
    QJsonObject rootObj;
    for (const QString& cat : releasedItems.keys()) {
        if (cat == "–í—Å–µ") continue;
        QJsonArray arr;
        for (const MediaItem& item : releasedItems[cat]) {
            arr.append(item.title);
        }
        rootObj[cat] = arr;
    }
    QJsonDocument doc(rootObj);
    QString appDataPath = QStandardPaths::writableLocation(QStandardPaths::AppDataLocation);
    QDir().mkpath(appDataPath + "/data");
    QFile fileReleased(appDataPath + "/data/released.json");
    if (fileReleased.open(QIODevice::WriteOnly | QIODevice::Truncate)) {
        fileReleased.write(doc.toJson());
        fileReleased.close();
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ –≤—ã—à–µ–¥—à–µ–µ
    QString upcomingFilePath = appDataPath + "/data/upcoming.json";
    DataManager::saveUpcomingItems(upcomingFilePath, upcomingItems);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–ª–∞–∫
    trashItems.clear();
    for (int i = 0; i < trashModel->rowCount(); ++i) {
        MediaItem item;
        item.title = trashModel->item(i)->text();
        trashItems.append(item);
    }
    QString trashFilePath = appDataPath + "/data/trash.json";
    DataManager::saveItems(trashFilePath, trashItems);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
    QString watchedFilePath = appDataPath + "/data/watched.json";
    DataManager::saveWatchedItems(watchedItems);
}

void MainWindow::updateUpcomingModel()
{
    upcomingModel->clear();
    std::sort(upcomingItems.begin(), upcomingItems.end());

    for (const UpcomingItem& item : upcomingItems) {
        QStandardItem* stdItem = new QStandardItem(item.displayText());
        stdItem->setFlags(stdItem->flags() & ~Qt::ItemIsEditable);
        upcomingModel->appendRow(stdItem);
    }
}

void MainWindow::onAddUpcoming()
{
    UpcomingItem item;

    bool ok;
    item.title = QInputDialog::getText(this, "–î–æ–±–∞–≤–∏—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, "", &ok);
    if (!ok || item.title.isEmpty()) return;

    QString seasonStr = QInputDialog::getText(this, "–î–æ–±–∞–≤–∏—Ç—å", "–°–µ–∑–æ–Ω (–æ–ø—Ü.):", QLineEdit::Normal, "", &ok);
    if (ok) {
        item.season = seasonStr.trimmed().isEmpty() ? -1 : seasonStr.toInt();
    }

    QString episodeStr = QInputDialog::getText(this, "–î–æ–±–∞–≤–∏—Ç—å", "–°–µ—Ä–∏—è (–æ–ø—Ü.):", QLineEdit::Normal, "", &ok);
    if (ok) {
        item.episode = episodeStr.trimmed().isEmpty() ? -1 : episodeStr.toInt();
    }

    QDate selectedDate;
    bool unknownDate = false;
    if (!getDateWithOptionalUnknown(selectedDate, unknownDate))
        return;

    item.date = selectedDate;
    item.dateUnknown = unknownDate;

    // –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    QStringList categories = releasedModels.keys();
    categories.removeAll("–í—Å–µ");
    std::sort(categories.begin(), categories.end());
    item.category = QInputDialog::getItem(this, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", categories, 0, false, &ok);
    if (!ok || item.category.isEmpty()) return;

    upcomingItems.append(item);
    updateUpcomingModel();
}


void MainWindow::onEditUpcoming()
{
    QModelIndex index = ui->listUpcoming->currentIndex();
    if (!index.isValid()) return;

    int row = index.row();
    if (row < 0 || row >= upcomingItems.size()) return;

    UpcomingItem &item = upcomingItems[row];

    bool ok;
    QString text = QInputDialog::getText(this, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ù–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, item.title, &ok);
    if (!ok || text.isEmpty()) return;
    item.title = text;

    QString seasonStr = QInputDialog::getText(this, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–°–µ–∑–æ–Ω (–æ–ø—Ü.):", QLineEdit::Normal,
                                              item.season >= 0 ? QString::number(item.season) : "", &ok);
    if (ok) {
        item.season = seasonStr.isEmpty() ? -1 : seasonStr.toInt();
    }

    QString episodeStr = QInputDialog::getText(this, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–°–µ—Ä–∏—è (–æ–ø—Ü.):", QLineEdit::Normal,
                                               item.episode >= 0 ? QString::number(item.episode) : "", &ok);
    if (ok) {
        item.episode = episodeStr.isEmpty() ? -1 : episodeStr.toInt();
    }

    QDate selectedDate = item.dateUnknown ? QDate::currentDate() : item.date;
    bool unknownDate = item.dateUnknown;

    if (!getDateWithOptionalUnknown(selectedDate, unknownDate))
        return;

    item.date = selectedDate;
    item.dateUnknown = unknownDate;


    updateUpcomingModel();
}

void MainWindow::onRemoveUpcoming()
{
    QModelIndex index = ui->listUpcoming->currentIndex();
    if (!index.isValid()) return;

    int row = index.row();
    if (row < 0 || row >= upcomingItems.size()) return;

    upcomingItems.removeAt(row);
    updateUpcomingModel();
}


void MainWindow::onAddTrash()
{
    bool ok;
    QString text = QInputDialog::getText(this, "–î–æ–±–∞–≤–∏—Ç—å", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, "", &ok);
    if (ok && !text.isEmpty()) {
        trashModel->appendRow(new QStandardItem(text));
    }
}

void MainWindow::onEditTrash()
{
    QModelIndex index = ui->listTrash->currentIndex();
    if (!index.isValid()) return;

    QString currentText = trashModel->itemFromIndex(index)->text();

    bool ok;
    QString text = QInputDialog::getText(this, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, currentText, &ok);
    if (ok && !text.isEmpty()) {
        trashModel->itemFromIndex(index)->setText(text);
    }
}

void MainWindow::onRemoveTrash()
{
    QModelIndex index = ui->listTrash->currentIndex();
    if (index.isValid()) {
        trashModel->removeRow(index.row());
    }
}

void MainWindow::onAddWatched()
{
    bool ok;
    QString text = QInputDialog::getText(this, "–î–æ–±–∞–≤–∏—Ç—å", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, "", &ok);
    if (ok && !text.isEmpty()) {
        watchedModel->appendRow(new QStandardItem(text));
        saveData();
    }
}

void MainWindow::onEditWatched()
{
    QModelIndex index = ui->listWatched->currentIndex();
    if (!index.isValid()) return;

    QString currentText = watchedModel->itemFromIndex(index)->text();
    bool ok;
    QString newText = QInputDialog::getText(this, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ:", QLineEdit::Normal, currentText, &ok);
    if (ok && !newText.isEmpty()) {
        watchedModel->itemFromIndex(index)->setText(newText);
        saveData();
    }
}

void MainWindow::onRemoveWatched()
{
    QModelIndex index = ui->listWatched->currentIndex();
    if (index.isValid()) {
        watchedModel->removeRow(index.row());
        saveData();
    }
}

void MainWindow::checkUpcomingToReleased()
{
    QDate today = QDate::currentDate();
    QVector<int> toRemove;

    for (int i = 0; i < upcomingItems.size(); ++i) {
        UpcomingItem &item = upcomingItems[i];

        if (!item.dateUnknown && item.date <= today && !item.transferred) {
            QString category = item.category;
            if (!releasedModels.contains(category)) {
                releasedModels[category] = new QStandardItemModel(this);
                ui->comboCategoryReleased->addItem(category);
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
            QString text = item.title;
            if (item.season >= 0) {
                text += " | –°–µ–∑–æ–Ω " + QString::number(item.season);
            }
            text += " | ";
            if (item.episode >= 0) {
                text += " –°–µ—Ä–∏—è " + QString::number(item.episode) + " | ";
            }

            QStandardItem *newItem = new QStandardItem("üîî " + text);
            releasedModels[category]->appendRow(newItem);

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ MediaItem –≤ releasedItems
            MediaItem mediaItem;
            mediaItem.title = item.title;
            mediaItem.season = item.season;
            mediaItem.episode = item.episode;
            mediaItem.releaseDate = item.date;
            mediaItem.dateUnknown = item.dateUnknown;
            mediaItem.category = Category::Released;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ —Å—Ç—Ä–æ–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if (item.category == "–ê–Ω–∏–º–µ")
                mediaItem.type = MediaType::Anime;
            else if (item.category == "–§–∏–ª—å–º—ã")
                mediaItem.type = MediaType::Movie;
            else
                mediaItem.type = MediaType::Series;

            releasedItems[category].append(mediaItem);

            // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–π
            item.transferred = true;
            toRemove.append(i);
        }
    }

    // –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ –∏–∑ —Å–ø–∏—Å–∫–∞ "–Ω–µ –≤—ã—à–µ–¥—à–∏—Ö"
    for (int i = toRemove.size() - 1; i >= 0; --i) {
        upcomingItems.removeAt(toRemove[i]);
    }

    updateUpcomingModel();
    saveData();
    if (currentReleasedCategory == "–í—Å–µ") {
        updateAllReleasedModel();
    }
}

void MainWindow::applyDarkTheme() {
    qApp->setStyleSheet(R"(
    QWidget {
        background-color: #2b2b2b;
        color: #f0f0f0;
    }

    QTabWidget::pane {
        border: 1px solid #444;
        background: #2b2b2b;
    }

    QTabBar::tab {
        background: #3c3f41;
        color: #f0f0f0;
        padding: 5px;
        border: 1px solid #555;
        border-bottom: none;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
    }

    QTabBar::tab:selected {
        background: #555;
    }

    QScrollBar:vertical {
        background: #2b2b2b;
    }

    QListView::item:selected,
    QTreeView::item:selected,
    QTableView::item:selected,
    QCalendarWidget QAbstractItemView::item:selected {
        background-color: #3399ff;
        color: #ffffff;
    }

    QComboBox QAbstractItemView::item:selected {
        background-color: #3399ff;
        color: white;
    }

    QCalendarWidget QWidget#qt_calendar_navigationbar {
        background-color: #3c3f41;
    }

    /* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é */
    QMenu {
        background-color: #2b2b2b;
        border: 1px solid #444;
        color: #f0f0f0;
    }

    QMenu::item {
        padding: 4px 24px 4px 24px;
        background-color: transparent;
    }

    QMenu::item:selected {
        background-color: #3399ff; /* —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ */
        color: white;
    }
)");
}


void MainWindow::applyLightTheme() {
    qApp->setStyleSheet("");
}

void MainWindow::setupThemeToggleButtons()
{
    QList<QPushButton*> buttons = {
        ui->btnToggleTheme,
        ui->btnToggleTheme_2,
        ui->btnToggleTheme_3
    };

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ checkable
    for (QPushButton* btn : buttons) {
        if (!btn) continue;

        btn->setCheckable(true);
        btn->setStyleSheet(R"(
            QPushButton {
                border: 1px solid #999;
                border-radius: 14px;
                padding: 4px 10px;
                background-color: #ccc;
                color: black;
                font-size: 16px;
            }
            QPushButton:checked {
                background-color: #444;
                color: white;
            }
        )");
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–º—ã
    QSettings settings("sendy-tech", "SerialNotes");
    isDarkTheme = settings.value("darkTheme", false).toBool();

    if (isDarkTheme)
        applyDarkTheme();
    else
        applyLightTheme();

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    for (QPushButton* btn : buttons) {
        if (!btn) continue;
        btn->blockSignals(true);
        btn->setChecked(isDarkTheme);
        btn->setText(isDarkTheme ? "üåû" : "üåô");
        btn->blockSignals(false);
    }

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∫ –æ–¥–Ω–æ–º—É —Å–ª–æ—Ç—É
    for (QPushButton* btn : buttons) {
        if (!btn) continue;

        connect(btn, &QPushButton::toggled, this, [=](bool checked) {
            isDarkTheme = checked;

            // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ –≤—Å–µ–º –∫–Ω–æ–ø–∫–∞–º
            for (QPushButton* b : buttons) {
                if (!b) continue;
                b->blockSignals(true);
                b->setChecked(checked);
                b->setText(checked ? "üåû" : "üåô");
                b->blockSignals(false);
            }

            if (checked)
                applyDarkTheme();
            else
                applyLightTheme();

            QSettings settings("sendy-tech", "SerialNotes");
            settings.setValue("darkTheme", isDarkTheme);
        });
    }
}

bool MainWindow::getDateWithOptionalUnknown(QDate& selectedDate, bool& isUnknown) {
    QDialog dialog(this);
    dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É");

    QVBoxLayout* layout = new QVBoxLayout(&dialog);

    QCalendarWidget* calendar = new QCalendarWidget(&dialog);
    calendar->setGridVisible(true);
    layout->addWidget(calendar);

    QCheckBox* unknownCheckBox = new QCheckBox("–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞", &dialog);
    layout->addWidget(unknownCheckBox);

    QDialogButtonBox* buttons = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel, &dialog);
    layout->addWidget(buttons);

    connect(buttons, &QDialogButtonBox::accepted, &dialog, &QDialog::accept);
    connect(buttons, &QDialogButtonBox::rejected, &dialog, &QDialog::reject);
    connect(unknownCheckBox, &QCheckBox::toggled, calendar, &QCalendarWidget::setDisabled);

    if (dialog.exec() == QDialog::Accepted) {
        isUnknown = unknownCheckBox->isChecked();
        if (!isUnknown)
            selectedDate = calendar->selectedDate();
        return true;
    }

    return false;
}

void MainWindow::setupContextMenus()
{
    ui->listReleased->setContextMenuPolicy(Qt::CustomContextMenu);
    connect(ui->listReleased, &QWidget::customContextMenuRequested, this, [this](const QPoint &pos){
        QModelIndex index = ui->listReleased->indexAt(pos);
        if (!index.isValid()) return;

        QMenu menu(this);
        menu.addAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", this, &MainWindow::onEditReleasedContext);
        menu.addAction("–£–¥–∞–ª–∏—Ç—å", this, &MainWindow::onRemoveReleasedContext);
        menu.addAction("–í —à–ª–∞–∫", this, &MainWindow::onMoveReleasedToTrash);
        menu.addAction("–í –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ", this, &MainWindow::onMoveReleasedToWatched);
        menu.exec(ui->listReleased->viewport()->mapToGlobal(pos));
    });

    ui->listUpcoming->setContextMenuPolicy(Qt::CustomContextMenu);
    connect(ui->listUpcoming, &QWidget::customContextMenuRequested, this, [this](const QPoint &pos){
        QModelIndex index = ui->listUpcoming->indexAt(pos);
        if (!index.isValid()) return;

        QMenu menu(this);
        menu.addAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", this, &MainWindow::onEditUpcomingContext);
        menu.addAction("–£–¥–∞–ª–∏—Ç—å", this, &MainWindow::onRemoveUpcomingContext);
        menu.exec(ui->listUpcoming->viewport()->mapToGlobal(pos));
    });

    ui->listTrash->setContextMenuPolicy(Qt::CustomContextMenu);
    connect(ui->listTrash, &QWidget::customContextMenuRequested, this, [this](const QPoint &pos){
        QModelIndex index = ui->listTrash->indexAt(pos);
        if (!index.isValid()) return;

        QMenu menu(this);
        menu.addAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", this, &MainWindow::onEditTrashContext);
        menu.addAction("–£–¥–∞–ª–∏—Ç—å", this, &MainWindow::onRemoveTrashContext);
        menu.exec(ui->listTrash->viewport()->mapToGlobal(pos));
    });

    ui->listWatched->setContextMenuPolicy(Qt::CustomContextMenu);
    connect(ui->listWatched, &QWidget::customContextMenuRequested, this, [this](const QPoint &pos){
        QModelIndex index = ui->listWatched->indexAt(pos);
        if (!index.isValid()) return;

        QMenu menu(this);
        menu.addAction("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", this, &MainWindow::onEditWatched);
        menu.addAction("–£–¥–∞–ª–∏—Ç—å", this, &MainWindow::onRemoveWatched);
        menu.exec(ui->listWatched->viewport()->mapToGlobal(pos));
    });
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è "–í—ã—à–µ–¥—à–µ–µ"
void MainWindow::onEditReleasedContext()
{
    // –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    onEditReleased();
}

void MainWindow::onRemoveReleasedContext()
{
    onRemoveReleased();
}

void MainWindow::onMoveReleasedToTrash()
{
    QModelIndex index = ui->listReleased->currentIndex();
    if (!index.isValid()) return;

    QString category = currentReleasedCategory;
    int row = index.row();

    if (category == "–í—Å–µ") {
        if (!proxyCategoryMap.contains(row)) return;
        category = proxyCategoryMap[row].first;
        row = proxyCategoryMap[row].second;
    }

    QStandardItemModel* model = releasedModels[category];
    if (!model || row >= model->rowCount()) return;

    QStandardItem* item = model->item(row);
    if (!item) return;

    QString text = item->text();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —à–ª–∞–∫
    trashModel->appendRow(new QStandardItem(text));

    // –£–¥–∞–ª—è–µ–º –∏–∑ released
    model->removeRow(row);

    saveData();

    if (currentReleasedCategory == "–í—Å–µ")
        updateAllReleasedModel();
}

void MainWindow::onMoveReleasedToWatched()
{
    QModelIndex index = ui->listReleased->currentIndex();
    if (!index.isValid()) return;

    QString category = currentReleasedCategory;
    int row = index.row();

    if (category == "–í—Å–µ") {
        if (!proxyCategoryMap.contains(row)) return;
        category = proxyCategoryMap[row].first;
        row = proxyCategoryMap[row].second;
    }

    QStandardItemModel* model = releasedModels[category];
    if (!model || row >= model->rowCount()) return;

    QStandardItem* item = model->item(row);
    if (!item) return;

    QString text = item->text();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
    watchedModel->appendRow(new QStandardItem(text));

    // –£–¥–∞–ª—è–µ–º –∏–∑ released
    model->removeRow(row);

    saveData();

    if (currentReleasedCategory == "–í—Å–µ")
        updateAllReleasedModel();
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è "–ù–µ –≤—ã—à–µ–¥—à–µ–µ"
void MainWindow::onEditUpcomingContext()
{
    onEditUpcoming();
}

void MainWindow::onRemoveUpcomingContext()
{
    onRemoveUpcoming();
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è "–®–ª–∞–∫"
void MainWindow::onEditTrashContext()
{
    onEditTrash();
}

void MainWindow::onRemoveTrashContext()
{
    onRemoveTrash();
}

void MainWindow::updateWatchedModel(const QStringList &watchedItems)
{
    watchedModel->clear();
    for (const QString &title : watchedItems) {
        watchedModel->appendRow(new QStandardItem(title));
    }
}
